plugins {
    id 'java-library'
    id 'org.springframework.boot'
    id 'com.google.cloud.tools.jib'
}

dependencies {

    implementation project(':auth-model')

    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'org.mapstruct:mapstruct'
    implementation 'org.liquibase:liquibase-core'
    implementation 'com.auth0:java-jwt'
    implementation 'org.hibernate.validator:hibernate-validator'

    implementation 'ua.tunepoint:commons-security'
    implementation 'ua.tunepoint:resource-api'
    implementation 'ua.tunepoint:resource-model'
    implementation 'ua.tunepoint:commons-web-exception'
    implementation 'ua.tunepoint:commons-web-model'
    implementation 'ua.tunepoint:commons-event-model'
    implementation 'ua.tunepoint:commons-event-starter'
    implementation 'ua.tunepoint:mail-model'
    implementation 'ua.tunepoint:mail-api'

    compileOnly 'org.projectlombok:lombok'
    compileOnly 'org.mapstruct:mapstruct-processor'

    runtimeOnly 'org.postgresql:postgresql'

    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.mapstruct:mapstruct-processor'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.mapstruct:mapstruct'

}

tasks.named('test') {
    useJUnitPlatform()
}

bootJar {
    archiveName "${project.name}.jar"
}

jib {
    from {
        image dockerImage
    }

    to {
        image "docker.io/tunepoint/${project.name}:${project.version}"

        auth {
            username System.getenv('DOCKER_USERNAME') ?: 'default'
            password System.getenv('DOCKER_PASSWORD') ?: 'default'
        }
    }
}